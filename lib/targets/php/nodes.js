// Generated by CoffeeScript 1.6.1

/*
# Nodes
The different kinds of node in the AST
*/


(function() {
  var Blocks, o;

  Blocks = require("./blocks");

  /*
  Helper method used for defining nodes
  */


  o = function(name, toString) {
    return module.exports[name] = toString;
  };

  o("content", function() {
    return this.body.join("");
  });

  o("string", function() {
    return JSON.stringify(this.body);
  });

  o("comment", function() {
    return "<?php /** " + this.body + " */ ?>";
  });

  o("partial", function() {
    return "<?=$this->partial(\"" + this.name + "\", $" + this.scopeName + ")?>";
  });

  o("callExpression", function() {
    return "$this->" + this.subject + "(" + (this.body.join(', ')) + ")";
  });

  o("rawExpression", function() {
    return "<?=" + this.body + "?>";
  });

  o("quotedExpression", function() {
    return "<?=$this->encode(" + this.body + ")?>";
  });

  o("accessor", function() {
    var content, item, _i, _len, _ref;
    if (this.head.type === "identifier") {
      content = ["$" + this.scopeName + "->" + this.head.name];
    } else {
      content = ["$" + this.head.name];
    }
    _ref = this.tail;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (item === String(parseInt(item, 10))) {
        content.push("[" + item + "]");
      } else {
        content.push("->" + item);
      }
    }
    return content.join("");
  });

  o("pathAccessor", function() {
    var content, item, _i, _len, _ref;
    content = ["$" + this.scopeName];
    if (this.head) {
      content.push("->" + this.head.name);
    }
    _ref = this.tail;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (item === String(parseInt(item, 10))) {
        content.push("[" + item + "]");
      } else {
        content.push("->" + item);
      }
    }
    return content.join("");
  });

  o("identifier", function() {
    if (this.scopeName != null) {
      return "$" + this.scopeName + "->" + this.name;
    } else {
      return "$" + this.name;
    }
  });

  o("thisIdentifier", function() {
    return "$" + this.name;
  });

  o("superIdentifier", function() {
    return "$" + this.name;
  });

  o("keyIdentifier", function() {
    return "$" + this.name;
  });

  o("reflectiveIdentifier", function() {
    return "$" + this.name;
  });

  o("block", function() {
    if (Blocks[this.name] != null) {
      return Blocks[this.name].call(this);
    } else {
      return Blocks.custom.call(this);
    }
  });

  o("elseExpression", function() {
    return "<?php else: ?>";
  });

}).call(this);
