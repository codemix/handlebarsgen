// Generated by CoffeeScript 1.6.1
(function() {
  var CLI, Generator, Targets, fs, mkdirp, optimist, path;

  fs = require("fs");

  path = require("path");

  optimist = require("optimist");

  mkdirp = require("mkdirp");

  Generator = require("./generator");

  Targets = require("./targets");

  /*
  Command line interface for handlebars-gen
  */


  module.exports = CLI = (function() {
    /*
    Initialize the CLI based on the command line options
    */

    function CLI(options) {
      if (options == null) {
        options = optimist.argv;
      }
      if (options.target != null) {
        this.target = Targets[options.target];
        if (this.target == null) {
          throw new Error("No such target: " + options.target);
        }
      } else {
        this.target = Targets.php;
      }
      if (options.bare != null) {
        this.bare = options.bare;
      } else {
        this.bare = false;
      }
      if (options.pattern != null) {
        this.pattern = new RegExp(options.pattern);
      } else {
        this.pattern = this.target.pattern;
      }
      this.extname = options.extname || this.target.extname;
      if (options.output != null) {
        this.output = path.resolve(options.output);
      } else {
        this.output = null;
      }
      if (options._.length) {
        this.input = options._;
      } else {
        this.input = null;
      }
      this.generator = new Generator({
        target: this.target
      });
    }

    CLI.prototype.run = function() {
      var files, item, resolved, _i, _len, _ref;
      files = [];
      if (this.input === null) {
        files.push({
          id: "__stdin__",
          name: "__stdin__",
          folder: "__stdin__",
          original: "__stdin__",
          extname: "",
          ast: this.generator.generate(fs.readFileSync('/dev/stdin', 'utf8'))
        });
      } else {
        _ref = this.input;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          resolved = path.resolve(item);
          if (fs.statSync(item).isDirectory()) {
            files.push.apply(files, this.generateDir(path.dirname(resolved), resolved));
          } else {
            files.push(this.generateFile(path.dirname(resolved), path.dirname(resolved), path.basename(resolved)));
          }
        }
      }
      return this.writeOutput(files);
    };

    /*
    Write the output according
    */


    CLI.prototype.writeOutput = function(files) {
      var data, exists, file, isDirectory, isFile, stats, targetFile, targetFolder, wrapperTemplates, _i, _len;
      if (this.bare) {
        wrapperTemplates = {};
      } else {
        wrapperTemplates = this.generator.compileWrapperTemplates();
      }
      if (this.output != null) {
        exists = fs.existsSync(this.output);
        if (exists) {
          stats = fs.statSync(this.output);
          isDirectory = stats.isDirectory();
          isFile = stats.isFile();
        } else {
          isFile = /\.(\w+)$/.test(this.output);
          isDirectory = !isFile;
        }
      }
      if (isDirectory) {
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          targetFolder = path.join(this.output, file.folder);
          mkdirp.sync(targetFolder);
          targetFile = path.join(targetFolder, "" + file.name + this.extname);
          fs.writeFile(targetFile, this.generator.wrapFile(file, wrapperTemplates));
        }
        return;
      }
      if (this.output != null) {
        if (files.length > 1) {
          data = this.target.combine(files, wrapperTemplates);
        } else {
          data = this.generator.wrapFile(file, wrapperTemplates);
        }
        targetFolder = mkdirp.sync(path.dirname(this.output));
        return fs.writeFile(this.output, data);
      } else {
        data = this.target.combine(files, wrapperTemplates);
        return process.stdout.write("" + data + "\n");
      }
    };

    CLI.prototype.generateFile = function(wd, folder, filename) {
      var ast, extname, name, original;
      extname = path.extname(filename);
      name = path.basename(filename, extname);
      folder = folder.substr(wd.length);
      original = path.join(wd, folder, filename);
      try {
        ast = this.generator.generate(fs.readFileSync(original, "utf8"));
      } catch (error) {
        process.stdin.write(["Parse Error in " + original + ": expected", error.expected.join(", "), "found", error.found, "at line ", error.line, "offset", error.offset, "\n"].join(" "));
        process.exit(1);
      }
      return {
        id: folder.substr(1).replace(path.sep, "/"),
        name: name,
        extname: extname,
        folder: folder,
        wd: wd,
        original: original,
        ast: ast
      };
    };

    /*
    Generate the
    */


    CLI.prototype.generateDir = function(wd, folder) {
      var files, item, _i, _len, _ref;
      files = [];
      _ref = fs.readdirSync(path.join(folder));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (fs.statSync(path.join(folder, item)).isDirectory()) {
          files.push.apply(files, this.generateDir(wd, path.join(folder, item)));
        } else if (this.pattern.test(item)) {
          files.push(this.generateFile(wd, folder, item));
        }
      }
      return files;
    };

    return CLI;

  })();

}).call(this);
