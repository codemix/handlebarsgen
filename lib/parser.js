module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successful,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var parseFunctions = {
        "start": parse_start
      };
      
      var options = arguments.length > 1 ? arguments[1] : {},
          startRule;
      
      if (options.startRule !== undefined) {
        startRule = options.startRule;
        
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Can't start parsing from rule " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportedPos = 0;
      var cachedReportedPos = 0;
      var cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function computeReportedPosDetails() {
        function advanceCachedReportedPos() {
          var ch;
          
          for (; cachedReportedPos < reportedPos; cachedReportedPos++) {
            ch = input.charAt(cachedReportedPos);
            if (ch === "\n") {
              if (!cachedReportedPosDetails.seenCR) { cachedReportedPosDetails.line++; }
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = false;
            } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
              cachedReportedPosDetails.line++;
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = true;
            } else {
              cachedReportedPosDetails.column++;
              cachedReportedPosDetails.seenCR = false;
            }
          }
        }
        
        if (cachedReportedPos !== reportedPos) {
          if (cachedReportedPos > reportedPos) {
            cachedReportedPos = 0;
            cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
          }
          advanceCachedReportedPos();
        }
        
        return cachedReportedPosDetails;
      }
      
      function text() {
        return input.substring(reportedPos, pos);
      }
      
      function offset() {
        return reportedPos;
      }
      
      function line() {
        return computeReportedPosDetails().line;
      }
      
      function column() {
        return computeReportedPosDetails().column;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var r0;
        
        reportFailures++;
        r0 = parse_content();
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Start");
        }
        return r0;
      }
      
      function parse_content() {
        var r0, r1, r2;
        
        reportFailures++;
        r1 = pos;
        r2 = parse_notTag();
        if (r2 === null) {
          r2 = parse_block();
          if (r2 === null) {
            r2 = parse_tag();
          }
        }
        if (r2 !== null) {
          r0 = [];
          while (r2 !== null) {
            r0.push(r2);
            r2 = parse_notTag();
            if (r2 === null) {
              r2 = parse_block();
              if (r2 === null) {
                r2 = parse_tag();
              }
            }
          }
        } else {
          r0 = null;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(c) {
            return {
              type: "content",
              body: c
            };
          })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Content");
        }
        return r0;
      }
      
      function parse_notTag() {
        var r0, r1, r2, r3, r4, r5;
        
        reportFailures++;
        r1 = pos;
        r3 = pos;
        r5 = pos;
        reportFailures++;
        if (input.substr(pos, 2) === "{{") {
          r4 = "{{";
          pos += 2;
        } else {
          r4 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{\"");
          }
        }
        reportFailures--;
        if (r4 === null) {
          r4 = "";
        } else {
          r4 = null;
          pos = r5;
        }
        if (r4 !== null) {
          if (input.length > pos) {
            r5 = input.charAt(pos);
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (r5 !== null) {
            r2 = [r4, r5];
          } else {
            r2 = null;
            pos = r3;
          }
        } else {
          r2 = null;
          pos = r3;
        }
        if (r2 !== null) {
          r0 = [];
          while (r2 !== null) {
            r0.push(r2);
            r3 = pos;
            r5 = pos;
            reportFailures++;
            if (input.substr(pos, 2) === "{{") {
              r4 = "{{";
              pos += 2;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"{{\"");
              }
            }
            reportFailures--;
            if (r4 === null) {
              r4 = "";
            } else {
              r4 = null;
              pos = r5;
            }
            if (r4 !== null) {
              if (input.length > pos) {
                r5 = input.charAt(pos);
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (r5 !== null) {
                r2 = [r4, r5];
              } else {
                r2 = null;
                pos = r3;
              }
            } else {
              r2 = null;
              pos = r3;
            }
          }
        } else {
          r0 = null;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r1);
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Not Tag");
        }
        return r0;
      }
      
      function parse_tag() {
        var r0, r1, r2, r3, r4, r5;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 2) === "{{") {
          r3 = "{{";
          pos += 2;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_comment();
          if (r4 === null) {
            r4 = parse_partial();
            if (r4 === null) {
              r4 = parse_expression();
            }
          }
          if (r4 !== null) {
            if (input.substr(pos, 2) === "}}") {
              r5 = "}}";
              pos += 2;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"}}\"");
              }
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(e) {
              return e;
          })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Tag");
        }
        return r0;
      }
      
      function parse_comment() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 33) {
          r3 = "!";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"!\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          r4 = [];
          r7 = pos;
          r9 = pos;
          reportFailures++;
          if (input.substr(pos, 2) === "}}") {
            r8 = "}}";
            pos += 2;
          } else {
            r8 = null;
            if (reportFailures === 0) {
              matchFailed("\"}}\"");
            }
          }
          reportFailures--;
          if (r8 === null) {
            r8 = "";
          } else {
            r8 = null;
            pos = r9;
          }
          if (r8 !== null) {
            if (input.length > pos) {
              r9 = input.charAt(pos);
              pos++;
            } else {
              r9 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (r9 !== null) {
              r6 = [r8, r9];
            } else {
              r6 = null;
              pos = r7;
            }
          } else {
            r6 = null;
            pos = r7;
          }
          while (r6 !== null) {
            r4.push(r6);
            r7 = pos;
            r9 = pos;
            reportFailures++;
            if (input.substr(pos, 2) === "}}") {
              r8 = "}}";
              pos += 2;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\"}}\"");
              }
            }
            reportFailures--;
            if (r8 === null) {
              r8 = "";
            } else {
              r8 = null;
              pos = r9;
            }
            if (r8 !== null) {
              if (input.length > pos) {
                r9 = input.charAt(pos);
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (r9 !== null) {
                r6 = [r8, r9];
              } else {
                r6 = null;
                pos = r7;
              }
            } else {
              r6 = null;
              pos = r7;
            }
          }
          if (r4 !== null) {
            r4 = input.substring(pos, r5);
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(body) {
            return {
              type: "comment",
              body: body
            }
          })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Comment");
        }
        return r0;
      }
      
      function parse_partial() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 62) {
          r3 = ">";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\">\"");
          }
        }
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_identifierPart();
            if (r5 === null) {
              r5 = parse_string();
            }
            if (r5 !== null) {
              r7 = pos;
              r8 = parse___();
              if (r8 !== null) {
                r9 = parse_identifier();
                if (r9 !== null) {
                  r6 = [r8, r9];
                } else {
                  r6 = null;
                  pos = r7;
                }
              } else {
                r6 = null;
                pos = r7;
              }
              r6 = r6 !== null ? r6 : "";
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(name, ctx) {
            return {
              type: "partial",
              name: name,
              subject: ctx ? ctx[1] : null
            }
          })(r5, r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Partial");
        }
        return r0;
      }
      
      function parse_expression() {
        var r0;
        
        reportFailures++;
        r0 = parse_controlExpression();
        if (r0 === null) {
          r0 = parse_rawExpression();
          if (r0 === null) {
            r0 = parse_quotedExpression();
          }
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Expression");
        }
        return r0;
      }
      
      function parse_controlExpression() {
        var r0;
        
        reportFailures++;
        r0 = parse_elseExpression();
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Control Expression");
        }
        return r0;
      }
      
      function parse_elseExpression() {
        var r0, r1, r2, r3, r4, r5;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 4) === "else") {
          r3 = "else";
          pos += 4;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"else\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          reportFailures++;
          if (/^[A-Za-z0-9_$]/.test(input.charAt(pos))) {
            r4 = input.charAt(pos);
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9_$]");
            }
          }
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() {
            return {
              type: "elseExpression"
            }
          })();
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Else Expression");
        }
        return r0;
      }
      
      function parse_rawExpression() {
        var r0, r1, r2, r3, r4, r5;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 123) {
          r3 = "{";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_callExpression();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 125) {
              r5 = "}";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"}\"");
              }
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(e) {
            e.raw = true;
            return {
              type: "rawExpression",
              body: e
            };
          })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Raw Expression");
        }
        return r0;
      }
      
      function parse_quotedExpression() {
        var r0, r1;
        
        reportFailures++;
        r1 = pos;
        r0 = parse_callExpression();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(e) {
            return {
              type: "quotedExpression",
              body: e
            }
          })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Quoted Expression");
        }
        return r0;
      }
      
      function parse_callExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        r3 = parse_identifierPart();
        if (r3 !== null) {
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_accessor();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          if (r5 !== null) {
            r4 = [];
            while (r5 !== null) {
              r4.push(r5);
              r6 = pos;
              r7 = parse___();
              if (r7 !== null) {
                r8 = parse_accessor();
                if (r8 !== null) {
                  r5 = [r7, r8];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            }
          } else {
            r4 = null;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(head, tail) {
            return {
              type: "callExpression",
              subject: head,
              body: tail.map(function(item){
                return item[1];
              })
            }
          })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_accessor();
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Call Expression");
        }
        return r0;
      }
      
      function parse_block() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 3) === "{{#") {
          r3 = "{{#";
          pos += 3;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{#\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_identifierPart();
          if (r4 !== null) {
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_accessor();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
            r5 = r5 !== null ? r5 : "";
            if (r5 !== null) {
              r6 = parse__();
              if (r6 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  r7 = "}}";
                  pos += 2;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}}\"");
                  }
                }
                if (r7 !== null) {
                  r8 = parse_content();
                  if (r8 !== null) {
                    if (input.substr(pos, 3) === "{{/") {
                      r9 = "{{/";
                      pos += 3;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"{{/\"");
                      }
                    }
                    if (r9 !== null) {
                      r10 = parse_identifierPart();
                      if (r10 !== null) {
                        if (input.substr(pos, 2) === "}}") {
                          r11 = "}}";
                          pos += 2;
                        } else {
                          r11 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"}}\"");
                          }
                        }
                        if (r11 !== null) {
                          r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11];
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(name, a, c, endName) {
            if (name != endName)
              return null;
            return {
              type: "block",
              name: name,
              subject: (a ? a[1] : null),
              body: c
            }
        
          })(r4, r5, r8, r10);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Block");
        }
        return r0;
      }
      
      function parse_accessor() {
        var r0;
        
        reportFailures++;
        r0 = parse_pathAccessor();
        if (r0 === null) {
          r0 = parse_plainAccessor();
          if (r0 === null) {
            r0 = parse_identifier();
            if (r0 === null) {
              r0 = parse_number();
              if (r0 === null) {
                r0 = parse_string();
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Accessor");
        }
        return r0;
      }
      
      function parse_plainAccessor() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        r3 = parse_identifier();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          if (input.charCodeAt(pos) === 46) {
            r7 = ".";
            pos++;
          } else {
            r7 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (r7 !== null) {
            r8 = parse_accessorPart();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            if (input.charCodeAt(pos) === 46) {
              r7 = ".";
              pos++;
            } else {
              r7 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (r7 !== null) {
              r8 = parse_accessorPart();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(head, tail) {
            return {
              type: "accessor",
              head: head,
              tail: tail.map(function(item){
                return item[1];
              })
            };
          })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Plain Accessor");
        }
        return r0;
      }
      
      function parse_pathAccessor() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 3) === "../") {
          r4 = "../";
          pos += 3;
        } else {
          r4 = null;
          if (reportFailures === 0) {
            matchFailed("\"../\"");
          }
        }
        if (r4 !== null) {
          r3 = [];
          while (r4 !== null) {
            r3.push(r4);
            if (input.substr(pos, 3) === "../") {
              r4 = "../";
              pos += 3;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"../\"");
              }
            }
          }
        } else {
          r3 = null;
        }
        if (r3 !== null) {
          r4 = parse_identifier();
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r5 = [];
            r7 = pos;
            if (input.charCodeAt(pos) === 46) {
              r8 = ".";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (r8 !== null) {
              r9 = parse_accessorPart();
              if (r9 !== null) {
                r6 = [r8, r9];
              } else {
                r6 = null;
                pos = r7;
              }
            } else {
              r6 = null;
              pos = r7;
            }
            while (r6 !== null) {
              r5.push(r6);
              r7 = pos;
              if (input.charCodeAt(pos) === 46) {
                r8 = ".";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (r8 !== null) {
                r9 = parse_accessorPart();
                if (r9 !== null) {
                  r6 = [r8, r9];
                } else {
                  r6 = null;
                  pos = r7;
                }
              } else {
                r6 = null;
                pos = r7;
              }
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(dep, head, tail) {
            return {
              type: "pathAccessor",
              depth: dep.length,
              head: head,
              tail: tail.map(function(item){
                return item[1];
              })
            };
          })(r3, r4, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Path Accessor");
        }
        return r0;
      }
      
      function parse_accessorPart() {
        var r0;
        
        reportFailures++;
        r0 = parse_number();
        if (r0 === null) {
          r0 = parse_string();
          if (r0 === null) {
            r0 = parse_identifierPart();
          }
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Accessor Part");
        }
        return r0;
      }
      
      function parse_identifier() {
        var r0, r1;
        
        reportFailures++;
        r0 = parse_thisIdentifier();
        if (r0 === null) {
          r0 = parse_reflectiveIdentifier();
          if (r0 === null) {
            r1 = pos;
            r0 = parse_identifierPart();
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(i) {
                return {
                  type: "identifier",
                  name: i
                }
              })(r0);
            }
            if (r0 === null) {
              pos = r1;
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Identifier");
        }
        return r0;
      }
      
      function parse_thisIdentifier() {
        var r0, r1, r2, r3, r4, r5;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 4) === "this") {
          r3 = "this";
          pos += 4;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"this\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          reportFailures++;
          if (/^[A-Za-z0-9_$]/.test(input.charAt(pos))) {
            r4 = input.charAt(pos);
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9_$]");
            }
          }
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() {
            return {
              type: "thisIdentifier",
              name: "this"
            }
          })();
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("This Identifier");
        }
        return r0;
      }
      
      function parse_reflectiveIdentifier() {
        var r0, r1, r2, r3, r4;
        
        reportFailures++;
        r0 = parse_keyIdentifier();
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 64) {
            r3 = "@";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"@\"");
            }
          }
          if (r3 !== null) {
            r4 = parse_identifierPart();
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(name) {
              return {
                type: "reflectiveIdentifier",
                name: name
              }
            })(r4);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Reflective Identifier");
        }
        return r0;
      }
      
      function parse_keyIdentifier() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 64) {
          r3 = "@";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"@\"");
          }
        }
        if (r3 !== null) {
          if (input.substr(pos, 3) === "key") {
            r4 = "key";
            pos += 3;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"key\"");
            }
          }
          if (r4 === null) {
            if (input.substr(pos, 5) === "index") {
              r4 = "index";
              pos += 5;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"index\"");
              }
            }
          }
          if (r4 !== null) {
            r6 = pos;
            reportFailures++;
            if (/^[A-Za-z0-9_]/.test(input.charAt(pos))) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9_]");
              }
            }
            reportFailures--;
            if (r5 === null) {
              r5 = "";
            } else {
              r5 = null;
              pos = r6;
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(name) {
            return {
              type: "keyIdentifier",
              name: name
            }
          })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Key Identifier");
        }
        return r0;
      }
      
      function parse_identifierPart() {
        var r0, r1, r2, r3, r4, r5;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (/^[A-Za-z$_]/.test(input.charAt(pos))) {
          r3 = input.charAt(pos);
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z$_]");
          }
        }
        if (r3 !== null) {
          r4 = [];
          if (/^[A-Za-z0-9$_]/.test(input.charAt(pos))) {
            r5 = input.charAt(pos);
            pos++;
          } else {
            r5 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Za-z0-9$_]");
            }
          }
          while (r5 !== null) {
            r4.push(r5);
            if (/^[A-Za-z0-9$_]/.test(input.charAt(pos))) {
              r5 = input.charAt(pos);
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9$_]");
              }
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r1);
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Identifier Part");
        }
        return r0;
      }
      
      function parse_number() {
        var r0, r1, r2;
        
        reportFailures++;
        r1 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          r2 = input.charAt(pos);
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (r2 !== null) {
          r0 = [];
          while (r2 !== null) {
            r0.push(r2);
            if (/^[0-9]/.test(input.charAt(pos))) {
              r2 = input.charAt(pos);
              pos++;
            } else {
              r2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          r0 = null;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r1);
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Number");
        }
        return r0;
      }
      
      function parse_string() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 34) {
          r3 = "\"";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          r4 = [];
          if (input.substr(pos, 2) === "\\\"") {
            r6 = "\\\"";
            pos += 2;
          } else {
            r6 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\\\"\"");
            }
          }
          if (r6 === null) {
            r8 = pos;
            r10 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 34) {
              r9 = "\"";
              pos++;
            } else {
              r9 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            reportFailures--;
            if (r9 === null) {
              r9 = "";
            } else {
              r9 = null;
              pos = r10;
            }
            if (r9 !== null) {
              if (input.length > pos) {
                r10 = input.charAt(pos);
                pos++;
              } else {
                r10 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (r10 !== null) {
                r7 = [r9, r10];
              } else {
                r7 = null;
                pos = r8;
              }
            } else {
              r7 = null;
              pos = r8;
            }
            if (r7 !== null) {
              r6 = [];
              while (r7 !== null) {
                r6.push(r7);
                r8 = pos;
                r10 = pos;
                reportFailures++;
                if (input.charCodeAt(pos) === 34) {
                  r9 = "\"";
                  pos++;
                } else {
                  r9 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\"\"");
                  }
                }
                reportFailures--;
                if (r9 === null) {
                  r9 = "";
                } else {
                  r9 = null;
                  pos = r10;
                }
                if (r9 !== null) {
                  if (input.length > pos) {
                    r10 = input.charAt(pos);
                    pos++;
                  } else {
                    r10 = null;
                    if (reportFailures === 0) {
                      matchFailed("any character");
                    }
                  }
                  if (r10 !== null) {
                    r7 = [r9, r10];
                  } else {
                    r7 = null;
                    pos = r8;
                  }
                } else {
                  r7 = null;
                  pos = r8;
                }
              }
            } else {
              r6 = null;
            }
          }
          while (r6 !== null) {
            r4.push(r6);
            if (input.substr(pos, 2) === "\\\"") {
              r6 = "\\\"";
              pos += 2;
            } else {
              r6 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\\\"\"");
              }
            }
            if (r6 === null) {
              r8 = pos;
              r10 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 34) {
                r9 = "\"";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              reportFailures--;
              if (r9 === null) {
                r9 = "";
              } else {
                r9 = null;
                pos = r10;
              }
              if (r9 !== null) {
                if (input.length > pos) {
                  r10 = input.charAt(pos);
                  pos++;
                } else {
                  r10 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                if (r10 !== null) {
                  r7 = [r9, r10];
                } else {
                  r7 = null;
                  pos = r8;
                }
              } else {
                r7 = null;
                pos = r8;
              }
              if (r7 !== null) {
                r6 = [];
                while (r7 !== null) {
                  r6.push(r7);
                  r8 = pos;
                  r10 = pos;
                  reportFailures++;
                  if (input.charCodeAt(pos) === 34) {
                    r9 = "\"";
                    pos++;
                  } else {
                    r9 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\\"\"");
                    }
                  }
                  reportFailures--;
                  if (r9 === null) {
                    r9 = "";
                  } else {
                    r9 = null;
                    pos = r10;
                  }
                  if (r9 !== null) {
                    if (input.length > pos) {
                      r10 = input.charAt(pos);
                      pos++;
                    } else {
                      r10 = null;
                      if (reportFailures === 0) {
                        matchFailed("any character");
                      }
                    }
                    if (r10 !== null) {
                      r7 = [r9, r10];
                    } else {
                      r7 = null;
                      pos = r8;
                    }
                  } else {
                    r7 = null;
                    pos = r8;
                  }
                }
              } else {
                r6 = null;
              }
            }
          }
          if (r4 !== null) {
            r4 = input.substring(pos, r5);
          }
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 34) {
              r5 = "\"";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(body) {
            return {
              type: "string",
              body: body
            };
          })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("String");
        }
        return r0;
      }
      
      function parse___() {
        var r0, r1, r2;
        
        reportFailures++;
        r1 = pos;
        r2 = parse_whitespace();
        if (r2 !== null) {
          r0 = [];
          while (r2 !== null) {
            r0.push(r2);
            r2 = parse_whitespace();
          }
        } else {
          r0 = null;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r1);
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Mandatory Whitespace");
        }
        return r0;
      }
      
      function parse__() {
        var r0;
        
        reportFailures++;
        r0 = parse___();
        r0 = r0 !== null ? r0 : "";
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("Optional Whitespace");
        }
        return r0;
      }
      
      function parse_whitespace() {
        var r0, r1, r2, r3, r4, r5;
        
        if (/^[\t\x0B\f \xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\t\\x0B\\f \\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]");
          }
        }
        if (r0 === null) {
          if (input.charCodeAt(pos) === 13) {
            r0 = "\r";
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\"");
            }
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            if (input.charCodeAt(pos) === 92) {
              r3 = "\\";
              pos++;
            } else {
              r3 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (r3 !== null) {
              if (input.charCodeAt(pos) === 13) {
                r4 = "\r";
                pos++;
              } else {
                r4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\r\"");
                }
              }
              r4 = r4 !== null ? r4 : "";
              if (r4 !== null) {
                if (input.charCodeAt(pos) === 10) {
                  r5 = "\n";
                  pos++;
                } else {
                  r5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\n\"");
                  }
                }
                if (r5 !== null) {
                  r0 = [r3, r4, r5];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              r0 = input.substring(pos, r1);
            }
          }
        }
        return r0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        reportedPos = Math.max(pos, rightmostFailuresPos);
        var found = reportedPos < input.length ? input.charAt(reportedPos) : null;
        var reportedPosDetails = computeReportedPosDetails();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          reportedPos,
          reportedPosDetails.line,
          reportedPosDetails.column
        );
      }
      
      return result;
    }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  subclass(result.SyntaxError, Error);
  
  return result;
})();
